# Generated by Django 2.0.8 on 2018-08-13 01:22

import cosme.v1.blocks
import cosme.v1.models.snippets
import datetime
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.contrib.taggit
import modelcluster.fields
import taggit.managers
import wagtail.core.blocks
import wagtail.core.fields
import wagtail.core.models
import wagtail.images.models
import wagtail.search.index
import wagtail.snippets.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtaildocs', '0007_merge'),
        ('taggit', '0002_auto_20150616_2121'),
        ('wagtailcore', '0040_page_draft_title'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('heading', models.CharField(help_text='The snippet heading', max_length=255, verbose_name='Heading')),
                ('body', wagtail.core.fields.RichTextField(blank=True)),
                ('contact_info', wagtail.core.fields.StreamField([('email', wagtail.core.blocks.StructBlock([('emails', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(required=False)), ('url', wagtail.core.blocks.CharBlock(default='/', required=False))])))])), ('phone', wagtail.core.blocks.StructBlock([('fax', wagtail.core.blocks.BooleanBlock(default=False, label='Is this number a fax?', required=False)), ('phones', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('number', wagtail.core.blocks.CharBlock(max_length=15)), ('extension', wagtail.core.blocks.CharBlock(max_length=4, required=False)), ('vanity', wagtail.core.blocks.CharBlock(help_text='A phoneword version of the above number', max_length=15, required=False)), ('tty', wagtail.core.blocks.CharBlock(label='TTY', max_length=15, required=False)), ('tty_ext', wagtail.core.blocks.CharBlock(label='TTY Extension', max_length=4, required=False))])))])), ('address', wagtail.core.blocks.StructBlock([('label', wagtail.core.blocks.CharBlock(required=False)), ('title', wagtail.core.blocks.CharBlock(required=False)), ('street', wagtail.core.blocks.CharBlock(required=False)), ('city', wagtail.core.blocks.CharBlock(max_length=50, required=False)), ('state', wagtail.core.blocks.CharBlock(max_length=25, required=False)), ('zip_code', wagtail.core.blocks.CharBlock(max_length=15, required=False))]))], blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='COSMEAuthoredPages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Author',
                'verbose_name_plural': 'Authors',
            },
        ),
        migrations.CreateModel(
            name='COSMEImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='title')),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.images.models.get_upload_to, verbose_name='file', width_field='width')),
                ('width', models.IntegerField(editable=False, verbose_name='width')),
                ('height', models.IntegerField(editable=False, verbose_name='height')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created at')),
                ('focal_point_x', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_y', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_width', models.PositiveIntegerField(blank=True, null=True)),
                ('focal_point_height', models.PositiveIntegerField(blank=True, null=True)),
                ('file_size', models.PositiveIntegerField(editable=False, null=True)),
                ('alt', models.CharField(blank=True, max_length=100)),
                ('collection', models.ForeignKey(default=wagtail.core.models.get_root_collection_id, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='wagtailcore.Collection', verbose_name='collection')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text=None, through='taggit.TaggedItem', to='taggit.Tag', verbose_name='tags')),
                ('uploaded_by_user', models.ForeignKey(blank=True, editable=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='uploaded by user')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='COSMEPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('shared', models.BooleanField(default=False)),
                ('has_unshared_changes', models.BooleanField(default=False)),
                ('language', models.CharField(choices=[('en', 'English'), ('es', 'Spanish'), ('zh', 'Chinese'), ('vi', 'Vietnamese'), ('ko', 'Korean'), ('tl', 'Tagalog'), ('ru', 'Russian'), ('ar', 'Arabic'), ('ht', 'Haitian Creole')], default='en', max_length=2)),
                ('sidefoot', wagtail.core.fields.StreamField([('call_to_action', wagtail.core.blocks.StructBlock([('slug_text', wagtail.core.blocks.CharBlock(required=False)), ('paragraph_text', wagtail.core.blocks.RichTextBlock(required=False)), ('button', wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(required=False)), ('url', wagtail.core.blocks.CharBlock(default='/', required=False)), ('size', wagtail.core.blocks.ChoiceBlock(choices=[('regular', 'Regular'), ('large', 'Large Primary')]))]))])), ('related_links', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(required=False)), ('paragraph', wagtail.core.blocks.RichTextBlock(required=False)), ('links', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(required=False)), ('url', wagtail.core.blocks.CharBlock(default='/', required=False))])))])), ('related_posts', wagtail.core.blocks.StructBlock([('limit', wagtail.core.blocks.CharBlock(default='3', help_text='This limit applies to EACH TYPE of post this module retrieves, not the total number of retrieved posts.')), ('show_heading', wagtail.core.blocks.BooleanBlock(default=True, help_text='This toggles the heading and icon for the related types.', label='Show Heading and Icon?', required=False)), ('header_title', wagtail.core.blocks.CharBlock(default='Further reading', label='Slug Title')), ('relate_posts', wagtail.core.blocks.BooleanBlock(default=True, editable=False, label='Blog Posts', required=False)), ('relate_newsroom', wagtail.core.blocks.BooleanBlock(default=True, editable=False, label='Newsroom', required=False)), ('relate_events', wagtail.core.blocks.BooleanBlock(default=True, label='Events', required=False)), ('specific_categories', wagtail.core.blocks.ListBlock(wagtail.core.blocks.ChoiceBlock(choices=[('Blog', (('At the CFPB', 'At the CFPB'), ('Policy &amp; Compliance', 'Policy and compliance'), ('Data, Research &amp; Reports', 'Data, research, and reports'), ('Info for Consumers', 'Info for consumers'))), ('Newsroom', (('Op-Ed', 'Op-ed'), ('Press Release', 'Press release'), ('Speech', 'Speech'), ('Testimony', 'Testimony')))], required=False), required=False)), ('and_filtering', wagtail.core.blocks.BooleanBlock(default=False, help_text='If checked, related posts will only be pulled in if they match ALL topic tags set on this page. Otherwise, related posts can match any one topic tag.', label='Match all topic tags', required=False))])), ('related_metadata', wagtail.core.blocks.StructBlock([('slug', wagtail.core.blocks.CharBlock(max_length=100)), ('content', wagtail.core.blocks.StreamBlock([('text', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(max_length=100)), ('blob', wagtail.core.blocks.RichTextBlock())], icon='pilcrow')), ('list', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(max_length=100)), ('links', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(required=False)), ('url', wagtail.core.blocks.CharBlock(default='/', required=False))])))], icon='list-ul')), ('date', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(max_length=100)), ('date', wagtail.core.blocks.DateBlock())], icon='date')), ('topics', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(default='Topics', max_length=100)), ('show_topics', wagtail.core.blocks.BooleanBlock(default=True, required=False))], icon='tag'))])), ('is_half_width', wagtail.core.blocks.BooleanBlock(default=False, required=False))])), ('email_signup', wagtail.core.blocks.StructBlock([('heading', wagtail.core.blocks.CharBlock(required=False)), ('text', wagtail.core.blocks.CharBlock(required=False)), ('gd_code', wagtail.core.blocks.CharBlock(required=False)), ('form_field', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('btn_text', wagtail.core.blocks.CharBlock(required=False)), ('required', wagtail.core.blocks.BooleanBlock(required=False)), ('info', wagtail.core.blocks.RichTextBlock(label='Disclaimer', required=False)), ('label', wagtail.core.blocks.CharBlock(required=True)), ('type', wagtail.core.blocks.ChoiceBlock(choices=[('text', 'Text'), ('checkbox', 'Checkbox'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('radio', 'Radio')], required=False)), ('placeholder', wagtail.core.blocks.CharBlock(required=False))]), icon='mail', required=False))])), ('sidebar_contact', wagtail.core.blocks.StructBlock([('contact', wagtail.snippets.blocks.SnippetChooserBlock('v1.Contact')), ('has_top_rule_line', wagtail.core.blocks.BooleanBlock(default=False, help_text='Add a horizontal rule line to top of contact block.', required=False))])), ('rss_feed', wagtail.core.blocks.ChoiceBlock(choices=[('blog_feed', 'Blog Feed'), ('newsroom_feed', 'Newsroom Feed')])), ('social_media', wagtail.core.blocks.StructBlock([('is_share_view', wagtail.core.blocks.BooleanBlock(default=True, help_text='If unchecked, social media icons will link users to official CFPB accounts. Do not fill in any further fields.', label='Desired action: share this page', required=False)), ('blurb', wagtail.core.blocks.CharBlock(default="Look what I found on the CFPB's site!", help_text='Sets the tweet text, email subject line, and LinkedIn post text.', required=False)), ('twitter_text', wagtail.core.blocks.CharBlock(help_text='(Optional) Custom text for Twitter shares. If blank, will default to value of blurb field above.', max_length=100, required=False)), ('twitter_related', wagtail.core.blocks.CharBlock(help_text='(Optional) A comma-separated list of accounts related to the content of the shared URL. Do not enter the  @ symbol. If blank, it will default to just "cfpb".', required=False)), ('twitter_hashtags', wagtail.core.blocks.CharBlock(help_text='(Optional) A comma-separated list of hashtags to be appended to default tweet text.', required=False)), ('twitter_lang', wagtail.core.blocks.CharBlock(help_text='(Optional) Loads text components in the specified language, if other than English. E.g., use "es"  for Spanish. See https://dev.twitter.com/web/overview/languages for a list of supported language codes.', required=False)), ('email_title', wagtail.core.blocks.CharBlock(help_text='(Optional) Custom subject for email shares. If blank, will default to value of blurb field above.', required=False)), ('email_text', wagtail.core.blocks.CharBlock(help_text='(Optional) Custom text for email shares. If blank, will default to "Check out this page from the CFPB".', required=False)), ('email_signature', wagtail.core.blocks.CharBlock(help_text='(Optional) Adds a custom signature line to email shares. ', required=False)), ('linkedin_title', wagtail.core.blocks.CharBlock(help_text='(Optional) Custom title for LinkedIn shares. If blank, will default to value of blurb field above.', required=False)), ('linkedin_text', wagtail.core.blocks.CharBlock(help_text='(Optional) Custom text for LinkedIn shares.', required=False))])), ('reusable_text', cosme.v1.blocks.ReusableTextChooserBlock(cosme.v1.models.snippets.ReusableText))], blank=True)),
            ],
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='COSMEPageCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('name', models.CharField(choices=[('Administrative adjudication docket', (('administrative-adjudication', 'Administrative adjudication'), ('stipulation-and-constent-order', 'Stipulation and consent order'))), ('Amicus Brief', (('us-supreme-court', 'U.S. Supreme Court'), ('fed-circuit-court', 'Federal Circuit Court'), ('fed-district-court', 'Federal District Court'), ('state-court', 'State Court'))), ('Blog', (('at-the-cfpb', 'At the CFPB'), ('policy_compliance', 'Policy and compliance'), ('data-research-reports', 'Data, research, and reports'), ('info-for-consumers', 'Info for consumers'))), ('Enforcement Action', (('fed-district-case', 'Federal district court case'), ('administrative-adjudication-2', 'Administrative adjudication'), ('stipulation-and-consent-order-2', 'Stipulation and consent order'))), ('Final rule', (('interim-final-rule', 'Interim final rule'), ('final-rule', 'Final rule'))), ('FOIA Frequently Requested Record', (('report', 'Report'), ('log', 'Log'), ('record', 'Record'))), ('Implementation Resource', (('compliance-aid', 'Compliance aid'), ('official-guidance', 'Official guidance'))), ('Newsroom', (('op-ed', 'Op-ed'), ('press-release', 'Press release'), ('speech', 'Speech'), ('testimony', 'Testimony'))), ('Notice and Opportunity for Comment', (('notice-proposed-rule', 'Advance notice of proposed rulemaking'), ('proposed-rule', 'Proposed rule'), ('interim-final-rule-2', 'Interim final rule'), ('request-comment-info', 'Request for comment or information'), ('proposed-policy', 'Proposed policy'), ('intent-preempt-determ', 'Intent to make preemption determination'), ('info-collect-activity', 'Information collection activities'), ('notice-privacy-act', 'Notice related to Privacy Act'))), ('Research Report', (('consumer-complaint', 'Consumer complaint'), ('super-highlight', 'Supervisory Highlights'), ('data-point', 'Data point'), ('industry-markets', 'Industry and markets'), ('consumer-edu-empower', 'Consumer education and empowerment'), ('to-congress', 'To Congress'))), ('Rule under development', (('notice-proposed-rule-2', 'Advance notice of proposed rulemaking'), ('proposed-rule-2', 'Proposed rule'))), ('Story', (('auto-loans', 'Auto loans'), ('bank-accts-services', 'Bank accounts and services'), ('credit-cards', 'Credit cards'), ('credit-reports-scores', 'Credit reports and scores'), ('debt-collection', 'Debt collection'), ('money-transfers', 'Money transfers'), ('mortgages', 'Mortgages'), ('payday-loans', 'Payday loans'), ('prepaid-cards', 'Prepaid cards'), ('student-loans', 'Student loans')))], max_length=255)),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='COSMERendition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filter_spec', models.CharField(db_index=True, max_length=255)),
                ('file', models.ImageField(height_field='height', upload_to=wagtail.images.models.get_rendition_upload_to, width_field='width')),
                ('width', models.IntegerField(editable=False)),
                ('height', models.IntegerField(editable=False)),
                ('focal_point_key', models.CharField(blank=True, default='', editable=False, max_length=16)),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='renditions', to='v1.COSMEImage')),
            ],
        ),
        migrations.CreateModel(
            name='COSMETaggedPages',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('desc', wagtail.core.fields.RichTextField(blank=True, verbose_name='Description')),
                ('link', models.URLField(blank=True, help_text='Example: URL to order a few copies of a printed piece.', validators=[django.core.validators.URLValidator])),
                ('alternate_link', models.URLField(blank=True, help_text='Example: a URL to for ordering bulk copies.', validators=[django.core.validators.URLValidator])),
                ('order', models.PositiveSmallIntegerField(blank=True, help_text='Snippets will be listed alphabetically by title in a Snippet List module, unless any in the list have a number in this field; those with an order value will appear in ascending order.', null=True)),
                ('alternate_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document')),
                ('related_file', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document')),
            ],
            options={
                'ordering': ('order', 'title'),
            },
        ),
        migrations.CreateModel(
            name='ResourceTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='v1.Resource')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='v1_resourcetag_items', to='taggit.Tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ReusableText',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, verbose_name='Snippet title (internal only)')),
                ('sidefoot_heading', models.CharField(blank=True, help_text='Applies "slug" style heading. Only for use in sidebars and prefooters (the "sidefoot"). See [GHE]/flapjack/Modules-V1/wiki/Atoms#slugs', max_length=255)),
                ('text', wagtail.core.fields.RichTextField()),
            ],
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='AbstractFilterPage',
            fields=[
                ('cosmepage_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='v1.COSMEPage')),
                ('header', wagtail.core.fields.StreamField([('article_subheader', wagtail.core.blocks.RichTextBlock(icon='form')), ('text_introduction', wagtail.core.blocks.StructBlock([('eyebrow', wagtail.core.blocks.CharBlock(help_text='Optional: Adds an H5 eyebrow above H1 heading text. Only use in conjunction with heading.', label='Pre-heading', required=False)), ('heading', wagtail.core.blocks.CharBlock(required=False)), ('intro', wagtail.core.blocks.RichTextBlock(required=False)), ('body', wagtail.core.blocks.RichTextBlock(required=False)), ('links', wagtail.core.blocks.ListBlock(wagtail.core.blocks.StructBlock([('text', wagtail.core.blocks.CharBlock(required=False)), ('url', wagtail.core.blocks.CharBlock(default='/', required=False))]), required=False)), ('has_rule', wagtail.core.blocks.BooleanBlock(help_text='Check this to add a horizontal rule line to bottom of text introduction.', label='Has bottom rule', required=False))])), ('item_introduction', wagtail.core.blocks.StructBlock([('show_category', wagtail.core.blocks.BooleanBlock(default=True, help_text="Whether to show the category or not (category must be set in 'Configuration').", required=False)), ('heading', wagtail.core.blocks.CharBlock(required=False)), ('paragraph', wagtail.core.blocks.RichTextBlock(required=False)), ('date', wagtail.core.blocks.DateBlock(required=False)), ('has_social', wagtail.core.blocks.BooleanBlock(help_text='Whether to show the share icons or not.', required=False))]))], blank=True)),
                ('preview_title', models.CharField(blank=True, max_length=255, null=True)),
                ('preview_subheading', models.CharField(blank=True, max_length=255, null=True)),
                ('preview_description', wagtail.core.fields.RichTextField(blank=True, null=True)),
                ('secondary_link_url', models.CharField(blank=True, max_length=500, null=True)),
                ('secondary_link_text', models.CharField(blank=True, max_length=255, null=True)),
                ('date_published', models.DateField(default=datetime.date.today)),
                ('date_filed', models.DateField(blank=True, null=True)),
                ('comments_close_by', models.DateField(blank=True, null=True)),
                ('preview_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='v1.COSMEImage')),
            ],
            options={
                'abstract': False,
            },
            bases=('v1.cosmepage',),
        ),
        migrations.AddField(
            model_name='resource',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='Tags can be used to filter snippets in a Snippet List.', through='v1.ResourceTag', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='resource',
            name='thumbnail',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='v1.COSMEImage'),
        ),
        migrations.AddField(
            model_name='cosmetaggedpages',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, to='v1.COSMEPage'),
        ),
        migrations.AddField(
            model_name='cosmetaggedpages',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='v1_cosmetaggedpages_items', to='taggit.Tag'),
        ),
        migrations.AddField(
            model_name='cosmepagecategory',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to='v1.COSMEPage'),
        ),
        migrations.AddField(
            model_name='cosmepage',
            name='authors',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma separated list of authors.', related_name='authored_pages', through='v1.COSMEAuthoredPages', to='taggit.Tag', verbose_name='Authors'),
        ),
        migrations.AddField(
            model_name='cosmepage',
            name='social_sharing_image',
            field=models.ForeignKey(blank=True, help_text='Optionally select a custom image to appear when users share this page on social media websites. Recommended size: 1200w x 630h. Maximum size: 4096w x 4096h.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='v1.COSMEImage'),
        ),
        migrations.AddField(
            model_name='cosmepage',
            name='tags',
            field=modelcluster.contrib.taggit.ClusterTaggableManager(blank=True, help_text='A comma-separated list of tags.', related_name='tagged_pages', through='v1.COSMETaggedPages', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='cosmeauthoredpages',
            name='content_object',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, to='v1.COSMEPage'),
        ),
        migrations.AddField(
            model_name='cosmeauthoredpages',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='v1_cosmeauthoredpages_items', to='taggit.Tag'),
        ),
        migrations.AlterUniqueTogether(
            name='cosmerendition',
            unique_together={('image', 'filter_spec', 'focal_point_key')},
        ),
    ]
